# Configuración básica de la aplicación
spring:
  application:
    name: appigle-gateway  # Nombre de la aplicación que aparecerá en los logs y monitoreo
  cloud:
    gateway:
      discovery:
        locator:
          enabled: false   # Deshabilitamos el descubrimiento automático, usamos DNS interno de Azure
      httpclient:
        connect-timeout: 5000      # Timeout de conexión en milisegundos
        response-timeout: 10000    # Timeout de respuesta en milisegundos
  # Configuración de Azure Key Vault para secretos
  azure:
    keyvault:
      secret:
        enabled: true            # Habilita la integración con Azure Key Vault
        endpoint: https://appigle-keyvault.vault.azure.net  # URL del Key Vault
        # No es necesario especificar credenciales cuando se usa identidad administrada
        # La aplicación usará automáticamente la identidad asignada al Container App
        profile:
          managed-identity:
            enabled: true        # Habilita el uso de identidad administrada para autenticación
  # Configuración de Redis para Azure - AÑADIDO
  data:
    redis:
      host: ${REDIS_HOST}                  # Host desde variable de entorno
      port: ${REDIS_PORT:6380}             # Puerto por defecto para Azure Redis con SSL
      password: ${REDIS_PASSWORD}          # Contraseña desde variable de entorno
      ssl:
        enabled: ${REDIS_SSL_ENABLED:true} # SSL habilitado por defecto para Azure Redis
      timeout: 2000ms                      # Timeout para operaciones Redis
      database: 0                          # Índice de base de datos Redis
      lettuce:
        pool:
          max-active: 16                   # Conexiones máximas activas
          max-idle: 8                      # Conexiones máximas inactivas
          min-idle: 4                      # Conexiones mínimas inactivas
          max-wait: 1000ms                 # Tiempo máximo de espera para una conexión

# Configuración del servidor web
server:
  port: 8080                      # Puerto en el que escucha la aplicación (ajustado de 8080 a 8080)
  forward-headers-strategy: native # Estrategia para manejar headers reenviados (importante para proxies)

# Configuración de observabilidad y monitoreo
management:
  # Configuración de Actuator endpoints
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics # Exponemos endpoints para monitoreo
  # Configuración específica del endpoint de salud
  endpoint:
    health:
      probes:
        enabled: true              # Habilita health probes para Kubernetes/Azure
      show-details: always         # Muestra detalles detallados en el health check
      # Añadimos Azure Key Vault como componente de salud
      group:
        keyvault:
          include: keyVault        # Incluye estado de Key Vault en health checks
 
  # Configuración de métricas
  metrics:
    export:
      azure:
        enabled: true              # Habilita exportación de métricas a Azure Monitor
    tags:
      application: ${spring.application.name} # Etiqueta todas las métricas con el nombre de la aplicación
    distribution:
      percentiles-histogram:
        http.server.requests: true # Habilita histogramas para métricas de solicitudes HTTP
  # Configuración de trazabilidad
  tracing:
    sampling:
      probability: 1.0             # Porcentaje de trazas a capturar (1.0 = 100%)
    baggage:
      correlation:
        enabled: true              # Habilita la correlación entre solicitudes
      remote-fields: request-id    # Campos para propagar en llamadas remotas

# Configuración de Application Insights
azure:
  application-insights:
    instrumentation-key: ${APPLICATIONINSIGHTS_INSTRUMENTATION_KEY:}  # Usa la clave de instrumentación de la variable de entorno
    enabled: true                  # Habilita Application Insights
    web:
      enabled: true                # Habilita el seguimiento web
    logger:
      level: INFO                  # Nivel de log para Application Insights

# Configuración de logs
logging:
  level:
    root: INFO                     # Nivel de log por defecto
    com.appigle.gateway: DEBUG     # Nivel de log para el paquete de la aplicación
    org.springframework.cloud.gateway: INFO  # Nivel de log para el gateway
    org.springframework.web: INFO  # Nivel de log para componentes web
    # Añadimos logging específico para Azure Key Vault
    com.azure.security.keyvault: INFO  # Nivel de log para componentes de Key Vault
    # Añadimos logging específico para Redis - AÑADIDO
    org.springframework.data.redis: DEBUG  # Nivel de log para operaciones Redis
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"  # Formato de los logs en consola

# Configuración de Rate Limiting - AÑADIDO
rate-limiting:
  redis-based: ${RATE_LIMITING_REDIS_BASED:true} # Usar Redis para rate limiting
  enabled: true                                  # Activar rate limiting
  default-limit-for-authenticated: ${RATE_LIMIT_AUTH:50}
  default-limit-for-anonymous: ${RATE_LIMIT_ANON:20}
  timeout-duration: ${RATE_LIMIT_TIMEOUT:100}

# Configuración de seguridad para la lista negra de tokens - AÑADIDO
security:
  jwt:
    token-blacklist:
      enabled: true                # Habilitar blacklist de tokens
      time-to-live: 86400          # TTL para tokens en blacklist (24 horas)

# HASTA AQUI TODO FUNCIONABA SOLO FALTABA POSTGRE NUEVAMENTE